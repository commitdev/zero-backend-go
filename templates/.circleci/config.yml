---
version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.5.0
  aws-eks: circleci/aws-eks@0.2.3
  aws-s3: circleci/aws-s3@1.0.11
  aws-cli: circleci/aws-cli@2.0.0
  queue: eddiewebb/queue@1.5.0
  slack: circleci/slack@3.4.2
  version-tag: commitdev/version-tag@0.0.3

variables:
  - &workspace /home/circleci/project

  - &build-image cimg/go:1.13


aliases:
  # Shallow Clone - this allows us to cut the 2 minute repo clone down to about 10 seconds for repos with 50,000 commits+
  - &checkout-shallow
    name: Checkout (Shallow)
    command: |
      #!/bin/sh
      set -e

      # Workaround old docker images with incorrect $HOME
      # check https://github.com/docker/docker/issues/2968 for details
      if [ "${HOME}" = "/" ]
      then
        export HOME=$(getent passwd $(id -un) | cut -d: -f6)
      fi

      mkdir -p ~/.ssh

      echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
      bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==' >> ~/.ssh/known_hosts

      (umask 077; touch ~/.ssh/id_rsa)
      chmod 0600 ~/.ssh/id_rsa
      (cat \<<EOF > ~/.ssh/id_rsa
      $CHECKOUT_KEY
      EOF
      )

      # use git+ssh instead of https
      git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true

      if [ -e /home/circleci/project/.git ]
      then
          cd /home/circleci/project
          git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true
      else
          mkdir -p /home/circleci/project
          cd /home/circleci/project
          git clone --depth=1 "$CIRCLE_REPOSITORY_URL" .
      fi

      if [ -n "$CIRCLE_TAG" ]
      then
        git fetch --depth=10 --force origin "refs/tags/${CIRCLE_TAG}"
      elif [[ "$CIRCLE_BRANCH" =~ ^pull\/* ]]
      then
      # For PR from Fork
        git fetch --depth=10 --force origin "$CIRCLE_BRANCH/head:remotes/origin/$CIRCLE_BRANCH"
      else
        git fetch --depth=10 --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
      fi

      if [ -n "$CIRCLE_TAG" ]
      then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q "$CIRCLE_TAG"
      elif [ -n "$CIRCLE_BRANCH" ]
      then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q -B "$CIRCLE_BRANCH"
      fi

      git reset --hard "$CIRCLE_SHA1"
      pwd

  - &install-binaries
      name: Install Binaries
      command: |
        KUSTOMIZE_VERSION=3.5.4
        IAM_AUTH_VERSION=0.5.0
        curl -L -o ./kustomize.tar.gz "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz"
        sudo tar xvzf ./kustomize.tar.gz -C /usr/local/bin/
        sudo chmod +x /usr/local/bin/kustomize
        kustomize version
        curl -L -o ./aws-iam-authenticator "https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v${IAM_AUTH_VERSION}/aws-iam-authenticator_${IAM_AUTH_VERSION}_linux_amd64"
        sudo mv ./aws-iam-authenticator /usr/local/bin/
        sudo chmod +x /usr/local/bin/aws-iam-authenticator


jobs:
  checkout_code:
    docker:
      - image: *build-image
    steps:
      - run: *checkout-shallow
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - .

  unit_test:
    docker:
      - image: *build-image
    working_directory: *workspace
    steps: # steps that comprise the `build` job
      - attach_workspace:
          at: *workspace
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - v1-pkg-cache-{{ checksum "go.sum" }}
            - v1-pkg-cache-
      - run:
          name: Run unit tests
          command: |
            go get -u github.com/jstemmer/go-junit-report
            mkdir -p test-reports
            go test -v ./... | go-junit-report > test-reports/junit.xml

      - save_cache: # Store cache in the /go/pkg directory
          key: v1-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

      # Requires the SLACK_WEBHOOK env var to be set
      #- slack/notify-on-failure

  build_and_push:
    executor: aws-eks/python3
    parameters:
      account-id:
        type: string
        default: ''
        description: |
          The id of the aws account containing the ECR repo to push an image to.
      repo:
        type: string
        default: ''
        description: |
          The name of the ECR repo to push an image to.
      region:
        type: string
        default: ''
        description: |
          The region to use for AWS operations.
    steps:
      - setup_remote_docker
          # docker_layer_caching: false  # only for performance plan circleci accounts
      - attach_workspace:
          at: *workspace
      - run: *checkout-shallow
      - version-tag/create
      - run: # Required by aws-cli
          command: |
            echo 'export AWS_REGION=<< parameters.region >>' >> $BASH_ENV
            echo 'export AWS_ECR_ACCOUNT_URL=<< parameters.account-id >>.dkr.ecr.<< parameters.region >>.amazonaws.com' >> $BASH_ENV
      - aws-ecr/build-and-push-image:
          repo: << parameters.repo >>
          tag: $VERSION_TAG,latest

  deploy:
    executor: aws-eks/python3
    parameters:
      namespace:
        type: string
        default: ''
        description: |
          The kubernetes namespace that should be used.
      account-id:
        type: string
        default: ''
        description: |
          The id of the aws account containing the ECR repo to push an image to.
      repo:
        type: string
        default: ''
        description: |
          The name of the ECR repo to deploy an image from.
      config-environment:
        type: string
        default: ''
        description: |
          The environment kustomize should overlay to generate the kubernetes config. Options are the directories in kubernetes/overlays/
      tag:
        type: string
        default: $VERSION_TAG
        description: |
          The tag that should be deployed.
      region:
        type: string
        default: ''
        description: |
          The region to use for AWS operations.
      cluster-name:
        description: |
          The name of the EKS cluster.
        type: string
      cluster-authentication-role-arn:
        default: ''
        description: |
          To assume a role for cluster authentication, specify an IAM role ARN with
          this option. For example, if you created a cluster while assuming an IAM
          role, then you must also assume that role to connect to the cluster the
          first time.
        type: string
    steps:
      - run: *checkout-shallow
      - version-tag/get
      - run: *install-binaries
      - run: # Required by aws-cli
          command: echo 'export AWS_DEFAULT_REGION=<< parameters.region >>' >> $BASH_ENV
      - aws-cli/install
      - aws-cli/setup
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          cluster-authentication-role-arn: << parameters.cluster-authentication-role-arn >>
          aws-region: << parameters.region >>
          install-kubectl: true
      - queue/until_front_of_line:
          time: '30'
      - run:
          name: Deploy
          command: |
            DEPLOYMENT=<< parameters.repo >>
            NAMESPACE=<< parameters.namespace >>
            kubectl create namespace $NAMESPACE || echo "Namespace already exists"

            MIGRATION_NAME=<< parameters.repo >>-migration
            SQL_DIR="${PWD}/database/migration"
            pushd kubernetes/migration
            kubectl -n $NAMESPACE delete configmap $MIGRATION_NAME || echo "no migration configmap existing for deletion" 
            if [ `ls ${SQL_DIR}/*.sql 2>/dev/null | wc -l` -gt 0 ] ; then
                kubectl -n $NAMESPACE create configmap $MIGRATION_NAME $(ls  ${SQL_DIR}/*.sql | xargs printf '--from-file %s ')
            else
                kubectl -n $NAMESPACE create configmap $MIGRATION_NAME
            fi
            kubectl -n $NAMESPACE delete job $MIGRATION_NAME || echo "no migration job existing for deletion" 
            kubectl -n $NAMESPACE create -f job.yml
            if ! kubectl -n $NAMESPACE wait --for=condition=complete --timeout=180s job/$MIGRATION_NAME ; then
                echo "$MIGRATION_NAME run failed:"
                kubectl -n $NAMESPACE describe job $MIGRATION_NAME
                exit 1
            fi
            popd

            cd kubernetes/overlays/<< parameters.config-environment >>
            IMAGE=<< parameters.account-id >>.dkr.ecr.<< parameters.region >>.amazonaws.com/<< parameters.repo >>
            kustomize edit set image fake-image=${IMAGE}:${VERSION_TAG}
            kustomize build . | kubectl apply -f - -n $NAMESPACE
            if ! kubectl -n $NAMESPACE rollout status deployment/$DEPLOYMENT -w --timeout=180s ; then
              echo "$DEPLOYMENT rollout check failed:"
              echo "$DEPLOYMENT deployment:"
              kubectl -n $NAMESPACE describe deployment $DEPLOYMENT
              echo "$DEPLOYMENT replicaset:"
              kubectl -n $NAMESPACE describe rs -l app=$DEPLOYMENT
              echo "$DEPLOYMENT pods:"
              kubectl -n $NAMESPACE describe pod -l app=$DEPLOYMENT
              exit 1
            fi
            MANIFEST=$(aws ecr batch-get-image --region << parameters.region >> --repository-name << parameters.repo >> --image-ids imageTag=latest --query 'images[].imageManifest' --output text)
            aws ecr put-image --region << parameters.region >> --repository-name << parameters.repo >> --image-tag last-deployed --image-manifest "$MANIFEST" || echo "Image Tag already updated"

workflows:
    version: 2
    # The main workflow. Check out the code, build it, push it, deploy to staging, test, deploy to production
    build_test_and_deploy:
      jobs:
        - checkout_code

        - unit_test:
            requires:
              - checkout_code

        - build_and_push:
            account-id: "<% index .Params `accountId` %>"
            repo: "<% .Name %>"
            region: "<% index .Params `region` %>"
            requires:
              - unit_test
            filters:
              branches:
                only:  # only branches matching the below regex filters will run
                  - /^master$/

        - deploy:
            name: deploy_staging
            account-id: "<% index .Params `accountId` %>"
            repo: "<% .Name %>"
            cluster-name: "<% .Name %>-stage-<% index .Params `region` %>"
            config-environment: "staging"
            cluster-authentication-role-arn: "arn:aws:iam::<% index .Params `accountId` %>:role/<% .Name %>-kubernetes-deployer-stage"
            region: "<% index .Params `region` %>"
            namespace: "<% .Name %>"
            tag: "${VERSION_TAG}"
            requires:
              - build_and_push

        - wait_for_approval:
            type: approval
            requires:
              - deploy_staging

        - queue/block_workflow:
            time: '30' # hold for 30 mins then abort
            requires:
              - wait_for_approval

        - deploy:
            name: deploy_production
            account-id: "<% index .Params `accountId` %>"
            repo: "<% .Name %>"
            cluster-name: "<% .Name %>-prod-<% index .Params `region` %>"
            config-environment: "production"
            cluster-authentication-role-arn: "arn:aws:iam::<% index .Params `accountId` %>:role/<% .Name %>-kubernetes-deployer-prod"
            region: "<% index .Params `region` %>"
            namespace: "<% .Name %>"
            tag: "${VERSION_TAG}"
            requires:
              - queue/block_workflow
